qnornm(96.17 0.042)
qnornm(0.95,96.17 0.042)
qnornm(0.95,96.17,0.042)
qnorm(0.95, 96.17, 0.042)
pnorm(100, 96.17, 0.042)
1-pnorm(100, 96.17, 0.042)
qnorm(p=0.975, mean=a, sd=sqrt(b))
qnorm(p=0.975, mean=96.17, sd=sqrt(0.042))
pnorm(q=100, mean=a, sd=sqrt(b))
pnorm(q=100, mean=96.17, sd=sqrt(0.042))
z <- rgamma(n=1000, shape=a, rate=b)
z <- rgamma(n=1000, shape=a, rate=b)
a = 3
b = 200
z <- rgamma(n=1000, shape=a, rate=b)
x <- 1/z
1 / GAMMA.INV( RAND(), a, 1/b )
pinvgamma(rand(), a, 1/b)
x
mean(x)
mean(z)
z <- rgamma(1000, shape=16.5, rate=6022.9)
sig2 <- 1/z
mu <- rnorm(1000, mean=609.3, sd=sqrt(sig2/27.1))
quantile(x=mu, probs=c(0.025, 0.975))
sum( muA > muB ) / 1000
z <- rgamma(n=1000, shape=a, rate=b)
x <- 1/z
mean(x)
mean(z)
z <- rgamma(n=1000, shape=a, rate=b)
x <- 1/z
z <- rgamma(1000, shape=16.5, rate=6022.9)
sig2 <- 1/z
mu <- rnorm(1000, mean=609.3, sd=sqrt(sig2/27.1))
quantile(x=mu, probs=c(0.025, 0.975))
?dgamma
setwd("E:/Workspace/R/R-coursera/Bayessian/project_2")
dat = read.csv("cpu.csv", header = FALSE)
colnames(dat) = c("vendor_name", "model_name", "myct", "mmin", "mmax","cache", "chmin", "chmax", "prp", "erp")
#get log
colMeans(dat[, c("prp", "erp", "myct", "mmin", "mmax","cache", "chmin", "chmax")] > 0)
dat["log2prp"] = log2(dat$prp)
dat["log2erp"] = log2(dat$erp)
dat["log2myct"] = log2(dat$myct)
dat["log2mmin"] = log2(dat$mmin)
dat["log2mmax"] = log2(dat$mmax)
dat["log2cache"] = dat$cache
dat$log2cache[dat$log2cache>0] <- log2(dat$log2cache[dat$log2cache>0])
# dat["log2chmin"] = dat$chmin
# dat$log2chmin[dat$log2chmin>0] <- log2(dat$log2chmin[dat$log2chmin>0])
# dat["log2chmax"] = dat$chmax
# dat$log2chmax[dat$log2chmax>0] <- log2(dat$log2chmax[dat$log2chmax>0])
data_jags = as.list(dat[, c("log2myct", "mmin", "mmax","log2cache", "chmin", "chmax", "log2prp")])
params = c("int", "b_myct", "b_mmin", "b_mmax", "b_chmin", "b_chmax", "b_cache", "sig2")
lmlog_string = " model {
for (i in 1:length(log2prp)) {
log2prp[i] ~ dnorm(mu[i], prec)
mu[i] = int + b_myct * log2myct[i] + b_mmin*mmin[i] + b_mmax*mmax[i] + b_chmin*chmin[i] + b_chmax *chmax[i] + b_cache * log2cache[i]
}
prec ~ dgamma(0.001, 1.0/1e6)
sig2 = 1.0 / prec
int ~ dnorm(0.0, 1.0/1e6)
b_myct ~ dnorm(0.0, 1.0/1e6)
b_mmin ~ dnorm(0.0, 1.0/1e6)
b_mmax ~ dnorm(0.0, 1.0/1e6)
b_chmin ~ dnorm(0.0, 1.0/1e6)
b_chmax ~ dnorm(0.0, 1.0/1e6)
b_cache ~ dnorm(0.0, 1.0/1e6)
} "
library("rjags")
set.seed(100)
lmlog_mod = jags.model(textConnection(lmlog_string), data=data_jags, n.chains=3)
update(lmlog_mod, 1e3)
lmlog_sim = coda.samples(model=lmlog_mod,
variable.names=params,
n.iter=5e3)
lmlog_csim = as.mcmc(do.call(rbind, lmlog_sim))
setwd("E:/Workspace/R/R-coursera/Bayessian/project_2")
dat = read.csv("cpu.csv", header = FALSE)
colnames(dat) = c("vendor_name", "model_name", "myct", "mmin", "mmax","cache", "chmin", "chmax", "prp", "erp")
#get log
colMeans(dat[, c("prp", "erp", "myct", "mmin", "mmax","cache", "chmin", "chmax")] > 0)
dat["log2myct"] = log2(dat$myct)
dat["log2cache"] = dat$cache
dat$log2cache[dat$log2cache>0] <- log2(dat$log2cache[dat$log2cache>0])
data_jags = as.list(dat[, c("log2myct", "mmin", "mmax","log2cache", "chmin", "chmax", "prp")])
params = c("int", "b_myct", "b_mmin", "b_mmax", "b_chmin", "b_chmax", "b_cache")
poirelog_string = " model {
for (i in 1:length(prp)) {
prp[i] ~ dpois(lam[i])
log(lam[i]) = int + b_myct * log2myct[i] + b_mmin*mmin[i] + b_mmax*mmax[i] + b_chmin*chmin[i] + b_chmax *chmax[i] + b_cache * log2cache[i]
}
int ~ dnorm(0.0, 1.0/1e6)
b_myct ~ dnorm(0.0, 1.0/1e4)
b_mmin ~ dnorm(0.0, 1.0/1e4)
b_mmax ~ dnorm(0.0, 1.0/1e4)
b_chmin ~ dnorm(0.0, 1.0/1e4)
b_chmax ~ dnorm(0.0, 1.0/1e4)
b_cache ~ dnorm(0.0, 1.0/1e4)
} "
library("rjags")
set.seed(100)
poirelog_mod = jags.model(textConnection(poirelog_string), data=data_jags, n.chains=3)
update(poirelog_mod, 1e3)
poirelog_sim = coda.samples(model=poirelog_mod,
variable.names=params,
n.iter=1e4)
poirelog_csim = as.mcmc(do.call(rbind, poirelog_sim))
## model checking
gelman.diag(poirelog_sim)
autocorr.diag(poirelog_sim)
effectiveSize(poirelog_sim)
## residual
head(dat)
X = as.matrix(dat[c(11,4,5,12,7,8)])
# head(X)
(pmed_coef = colMeans(poirelog_csim))
logyhat = pmed_coef["int"] + X %*% pmed_coef[c("b_myct", "b_mmin", "b_mmax", "b_cache", "b_chmin", "b_chmax")]
yhat = exp(logyhat)
plot(yhat, dat$prp - yhat)
plot(logyhat, log(dat$prp) - logyhat)
mean(log(dat$prp) - logyhat)
#-0.1015074
sqrt(mean((dat$prp - yhat)**2))
t
## compute DIC
(dic = dic.samples(poire_mod, n.iter=1e3))
## compute DIC
(dic = dic.samples(poirelog_mode, n.iter=1e3))
## compute DIC
(dic = dic.samples(poirelog_mod, n.iter=1e3))
